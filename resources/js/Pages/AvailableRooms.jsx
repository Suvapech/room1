import React, { useState, useEffect } from 'react';
import { Link, usePage } from '@inertiajs/react';
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout';

export default function AvailableRooms() {
  const { rooms = [] } = usePage().props;
  const [availableRooms, setAvailableRooms] = useState([]);
  const [filteredRooms, setFilteredRooms] = useState([]);
  const [checkInDate, setCheckInDate] = useState('');
  const [checkOutDate, setCheckOutDate] = useState('');

  useEffect(() => {
    console.log("Rooms data received:", rooms);

    const roomsAvailable = rooms.filter(room => room.status === 'not_reserved');

    const uniqueRooms = Array.from(new Set(roomsAvailable.map(room => room.room_number)))
      .map(roomNumber => roomsAvailable.find(room => room.room_number === roomNumber));

    const sortedRooms = uniqueRooms.sort((a, b) => {
      const getLetter = room => room.room_number.charAt(0);
      const getNumber = room => parseInt(room.room_number.slice(1), 10);

      if (getLetter(a) === getLetter(b)) {
        return getNumber(a) - getNumber(b);
      }
      return getLetter(a).localeCompare(getLetter(b));
    });

    setAvailableRooms(sortedRooms);
    setFilteredRooms(sortedRooms);
  }, [rooms]);

  const handleFilterByDate = () => {
    if (!checkInDate || !checkOutDate) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Check-in ‡πÅ‡∏•‡∏∞ Check-out');
      return;
    }
  
    console.log("üîç ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:", checkInDate, checkOutDate);
    console.log("üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API:", rooms);
  
    const checkValidDate = (dateString) => {
      const date = new Date(dateString);
      return !isNaN(date.getTime());
    };
  
    let filteredRooms = rooms.filter((room) => {
      const availableFrom = checkValidDate(room.available_from) ? new Date(room.available_from) : new Date();
      const availableTo = checkValidDate(room.available_to) ? new Date(room.available_to) : new Date();
  
      if (!checkValidDate(room.available_from) || !checkValidDate(room.available_to)) {
        console.log(`‡∏´‡πâ‡∏≠‡∏á ${room.room_number} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á`);
        return true;
      }
  
      const checkIn = new Date(checkInDate);
      const checkOut = new Date(checkOutDate);
  
      return availableFrom <= checkIn && availableTo >= checkOut;
    });
  
    // ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏ã‡πâ‡∏≥ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Map ‡πÄ‡∏Å‡πá‡∏ö room_number ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    const uniqueRoomsMap = new Map();
    filteredRooms.forEach(room => {
      if (!uniqueRoomsMap.has(room.room_number)) {
        uniqueRoomsMap.set(room.room_number, room);
      }
    });
  
    filteredRooms = Array.from(uniqueRoomsMap.values());
  
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    filteredRooms.sort((a, b) => {
      const getLetter = room => room.room_number.match(/[A-Za-z]+/)[0]; // ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
      const getNumber = room => parseInt(room.room_number.match(/\d+/)[0], 10); // ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  
      if (getLetter(a) === getLetter(b)) {
        return getNumber(a) - getNumber(b);
      }
      return getLetter(a).localeCompare(getLetter(b));
    });
  
    console.log("‚úÖ ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß):", filteredRooms);
    setAvailableRooms(filteredRooms);
  };  

  return (
    <AuthenticatedLayout>
      <div className="container mx-auto p-8 bg-white shadow-xl rounded-lg border border-gray-200">
        <h2 className="text-3xl font-bold text-center mb-6 text-black-600">‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ</h2>

        {/* üî• ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á */}
        <div className="flex justify-center gap-4 mb-6">
          <div>
            <label className="block text-gray-700">Check-in</label>
            <input
              type="date"
              className="border border-gray-300 p-2 rounded-lg"
              value={checkInDate}
              onChange={(e) => setCheckInDate(e.target.value)}
            />
          </div>
          <div>
            <label className="block text-gray-700">Check-out</label>
            <input
              type="date"
              className="border border-gray-300 p-2 rounded-lg"
              value={checkOutDate}
              onChange={(e) => setCheckOutDate(e.target.value)}
            />
          </div>
          <button
            onClick={handleFilterByDate}
            className="bg-blue-500 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-600 mt-6"
          >
            ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
          </button>
        </div>

        {filteredRooms.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="min-w-full bg-white shadow-md rounded-lg border border-gray-200">
              <thead>
                <tr className="bg-gradient-to-r from-indigo-500 to-blue-500 text-white">
                  <th className="py-3 px-4 text-left">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á</th>
                  <th className="py-3 px-4 text-left">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th className="py-3 px-4 text-left">‡∏£‡∏≤‡∏Ñ‡∏≤</th>
                </tr>
              </thead>
              <tbody>
                {filteredRooms.map((room, index) => (
                  <tr key={index} className="border-b hover:bg-blue-100 odd:bg-gray-50">
                    <td className="py-3 px-4">{room.room_number}</td>
                    <td className="py-3 px-4 text-green-600">{room.status}</td>
                    <td className="py-3 px-4">
                      {(room.price ?? 1000).toLocaleString()} ‡∏ö‡∏≤‡∏ó
                    </td>
                  </tr>
                ))}
              </tbody>

            </table>
          </div>
        ) : (
          <p className="text-center py-6 text-gray-500">
            {checkInDate && checkOutDate ? "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á"}
          </p>
        )}
      </div>
    </AuthenticatedLayout>
  );
}
